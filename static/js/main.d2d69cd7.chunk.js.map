{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Container","styled","div","_templateObject","Content","_templateObject2","Div","_templateObject3","H1","h1","_templateObject4","Select","select","_templateObject5","Option","option","_templateObject6","Box","_this$props","this","props","confirmed","recovered","deaths","title","react_default","a","createElement","style","background","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","confirmedPoland","recoveredPoland","deathsPoland","confirmedCountry","recoveredCountry","deathsCountry","countries","lastUpdate","componentDidMount","getData","getDataPoland","getCountry","getCountryData","bind","assertThisInitialized","Axios","get","respone","setState","data","value","JSON","parse","stringify","e","concat","target","map","country","i","key","name","App_Box","onChange","selectCountry","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d2d69cd7.chunk.js","sourcesContent":["\nimport Axios from 'axios';\nimport React, {Component} from 'react';\nimport styled from 'styled-components'\n\nconst Container = styled.div`\nbackground: #250033;\nwidth: 80%;\nborder-radius: 25px;\npadding: 20px;\npadding-top:20px;\nmax-width: 680px;\ntext-align:center;\nmargin: 0 auto;\nmargin-top: 40px;\njustify-content: center;\nfont-size: 20px;\n`\nconst Content = styled.div`\ndisplay: flex;\njustify-content: center;\n@media (max-width: 768px) {\n    display: inline;\n    justify-content: center;\n  }\n  padding-bottom:25px;\n  padding-top:25px;\n`\nconst Div = styled.div`\nbackground: #534;\nwidth: 150px;\npadding: 10px;\nborder-radius: 10px;\n\ncolor: #ccc;\nmargin: 0 auto;\nmargin-top:10px;\n`\nconst H1 = styled.h1`\ncolor: #889;\nfont-size:30px;\nmargin-bottom: 0px;\n`\n\nconst Select = styled.select`\nbackground: #250033;\ncolor: #889;\nfont-size: 20px;\nborder-radius: 5px;\ntext-align-last: center;\n   text-align: center;\n   -ms-text-align-last: center;\n   -moz-text-align-last: center;\npadding-top:5px;\npadding-bottom:5px;\nwidth: 80%;\n`\n\nconst Option = styled.option`\npadding-top:5px;\npadding-bottom:5px;\n`\nclass Box extends Component{\n\n\n  render(){\n    const {confirmed,recovered,deaths,title} = this.props;\n    return(\n    <div>\n      <H1>{title}</H1>\n      <Content> \n        <Div style={{ background: '#b38f00' }}>\n          <header>Zarażeń</header>\n          {confirmed}\n        </Div>\n        <Div style={{ background: '#123123' }}>\n          <header>Wyzdrownień</header>\n          {recovered}\n        </Div>\n        <Div style={{ background: '#111' }}>\n          <header>Zgonów</header>\n          {deaths}\n        </Div>\n       </Content>\n       </div>\n      \n    )\n  }\n}\nclass App extends Component {\n\n  constructor(props){\n    super(props);\n    this.getCountryData= this.getCountryData.bind(this);\n  }\n\n  state ={\n    confirmed: 0,\n    recovered: 0,\n    deaths: 0,\n    confirmedPoland: 0,\n    recoveredPoland: 0,\n    deathsPoland: 0,\n    confirmedCountry: 0,\n    recoveredCountry: 0,\n    deathsCountry: 0,\n    countries:[],\n    lastUpdate:''\n\n  }\n  componentDidMount = () =>{\n    this.getData();\n    this.getDataPoland();\n    this.getCountry();\n  }\n\n  async getData(){\n    const respone = await Axios.get('https://covid19.mathdro.id/api');\n    this.setState({\n      confirmed: respone.data.confirmed.value,\n      recovered: respone.data.recovered.value,\n      deaths: respone.data.deaths.value,\n      lastUpdate: respone.data.lastUpdate\n    })\n  }\n  async getDataPoland(){\n    const respone = await Axios.get('https://covid19.mathdro.id/api/countries/PL');\n    this.setState({\n      confirmedPoland: respone.data.confirmed.value,\n      recoveredPoland: respone.data.recovered.value,\n      deathsPoland: respone.data.deaths.value\n    })\n  }\n  async getCountry(){\n    const respone = await Axios.get('https://covid19.mathdro.id/api/countries');\n    const countries=JSON.parse(JSON.stringify(respone.data.countries));\n    \n    this.setState({\n      countries\n    })\n  }\n  async getCountryData(e){\n    const respone = await Axios.get(`https://covid19.mathdro.id/api/countries/${e.target.value}`);\n    this.setState({\n      confirmedCountry: respone.data.confirmed.value,\n      recoveredCountry: respone.data.recovered.value,\n      deathsCountry: respone.data.deaths.value\n    })\n  }\n  selectCountry(){\n    return this.state.countries.map((country,i)=>{\n      return <Option key={i}>{country.name}</Option>\n    })\n  }\n\n  render(){\n   return (\n     <Container >\n       <H1>Statystyki kolanowirusa</H1>\n       <Box title=\"Świat:\" confirmed={this.state.confirmed} recovered={this.state.recovered} deaths={this.state.deaths} />\n      <Box title=\"Polska:\" confirmed={this.state.confirmedPoland} recovered={this.state.recoveredPoland} deaths={this.state.deathsPoland} />\n     <H1><Select onChange={this.getCountryData}>\n        {this.selectCountry()}\n      </Select></H1> \n      <Box title=\"\" confirmed={this.state.confirmedCountry} recovered={this.state.recoveredCountry} deaths={this.state.deathsCountry} />\n      {this.state.lastUpdate}\n     </Container>\n    \n\n  ); \n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}